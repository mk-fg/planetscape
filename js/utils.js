// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var add_task, add_task_now, assert, deep_freeze, dump, schedule, throw_err, util,
    __hasProp = {}.hasOwnProperty;

  util = require('util');

  throw_err = function(msg) {
    throw new Error(msg || 'Unspecified Error');
  };

  assert = function(condition, msg) {
    if (!condition) {
      if ((msg != null) && typeof msg !== 'string') {
        dump(msg, 'Error Data Context');
      }
      return throw_err(msg || 'Assertion failed');
    }
  };

  dump = function(data, label, opts) {
    if (label == null) {
      label = 'unlabeled object';
    }
    if (opts == null) {
      opts = {};
    }
    if (opts.colors == null) {
      opts.colors = true;
    }
    if (opts.depth == null) {
      opts.depth = 4;
    }
    return util.debug(("" + label + "\n") + util.inspect(data, opts));
  };

  add_task = function(interval, cb) {
    return setInterval(cb, interval * 1000);
  };

  add_task_now = function(interval, cb) {
    cb();
    return add_task(interval, cb);
  };

  schedule = function(delay, cb) {
    return setTimeout(cb, delay * 1000);
  };

  deep_freeze = function(layer) {
    var k, v, _i, _len;
    if ((layer != null) && typeof layer === 'object') {
      if (Array.isArray(layer)) {
        for (_i = 0, _len = layer.length; _i < _len; _i++) {
          v = layer[_i];
          deep_freeze(v);
        }
      } else {
        for (k in layer) {
          if (!__hasProp.call(layer, k)) continue;
          v = layer[k];
          deep_freeze(v);
        }
      }
      return Object.freeze(layer);
    }
  };

  module.exports.throw_err = throw_err;

  module.exports.assert = assert;

  module.exports.dump = dump;

  module.exports.add_task = add_task;

  module.exports.add_task_now = add_task_now;

  module.exports.schedule = schedule;

  module.exports.deep_freeze = deep_freeze;

}).call(this);
