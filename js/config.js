// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var fs, load_conf, path, u, util, yaml,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  u = require('./utils');

  path = require('path');

  fs = require('fs');

  util = require('util');

  yaml = require('js-yaml');

  load_conf = function(path_base, extension_override) {
    var conf, conf_merge, config, err, n, path_conf, path_conf_abs, path_conf_bases, path_conf_order, path_home, _i, _len, _ref, _ref1, _ref2, _ref3;
    config = null;
    conf_merge = function(conf, ext) {
      var k, n, v, _i, _len;
      if (!conf) {
        conf = ext;
      } else {
        for (k in ext) {
          if (!__hasProp.call(ext, k)) continue;
          v = ext[k];
          if (k in conf) {
            if (Array.isArray(conf[k]) && Array.isArray(v)) {
              for (_i = 0, _len = v.length; _i < _len; _i++) {
                n = v[_i];
                conf[k].push(n);
              }
              v = conf[k];
            } else if (typeof conf[k] === 'object' && typeof v === 'object') {
              v = conf_merge(conf[k], v);
            }
          }
          conf[k] = v;
        }
      }
      return conf;
    };
    path_home = process.env[(process.platform === 'win32' ? 'USERPROFILE' : 'HOME')];
    _ref = [[path_base], [], []], path_conf_order = _ref[0], path_conf_bases = _ref[1], path_conf_abs = _ref[2];
    while (path_conf_order.length) {
      _ref1 = [path_conf_order[0], path_conf_order.slice(1)], path_conf = _ref1[0], path_conf_order = _ref1[1];
      if (path_conf.match(/^~\//)) {
        u.assert(path_home, 'Unable to get user home path from env');
        path_conf = path.join(path_home, path_conf.substr(2));
      }
      path_conf = path.resolve(path_conf);
      try {
        path_conf = fs.realpathSync(path_conf);
      } catch (_error) {
        continue;
      }
      if (__indexOf.call(path_conf_abs, path_conf) >= 0) {
        continue;
      }
      try {
        conf = yaml.safeLoad(fs.readFileSync(path_conf, {
          encoding: 'utf-8'
        }), {
          filename: path_conf,
          strict: true,
          schema: yaml.CORE_SCHEMA
        });
      } catch (_error) {
        err = _error;
        util.error("Failed to process configuration file: " + path_conf + "\n  " + err);
        process.exit(1);
      }
      if (conf.base && (_ref2 = conf.base, __indexOf.call(path_conf_bases, _ref2) < 0)) {
        _ref3 = [path_conf, conf.base];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          n = _ref3[_i];
          path_conf_order.unshift(n);
        }
        path_conf_bases.push(conf.base);
        continue;
      }
      config = conf_merge(config, conf);
      path_conf_abs.push(path_conf);
      if (extension_override) {
        config.extension = extension_override;
        extension_override = null;
      }
      if (config.extension) {
        path_conf_order.unshift(config.extension);
      }
      delete config.base;
      delete config.extension;
    }
    return config;
  };

  module.exports.load_conf = load_conf;

}).call(this);
